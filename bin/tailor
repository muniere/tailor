#!/usr/bin/env ruby

require 'thor'
require 'ostruct'
require 'colorize'
require 'awesome_print'

require_relative '../lib/tailor'

class CLI < Thor
  
  #
  # start
  #

  desc 'start <project>', 'start to tail logs'
  def start(name='default')

    # load
    project = Tailor::Project.load(name).validate

    # message(main)
    queue = Queue.new

    Thread.start do 
      while message = queue.pop
        if message.is_a?(Exception)
          STDERR.puts(message.inspect.red)
        elsif message.is_a?(String)
          STDOUT.puts(message)
        else 
          STDOUT.puts(message.inspect)
        end
      end
    end

    # tail

    clients = project.servers.map{ |server| 
      Tailor::Client.new(path: project.path, server: server, queue: queue) 
    }

    begin
      Parallel.each(clients, in_threads: clients.length) do |client|
        client.start
      end
    rescue => e
      STDERR.puts(e.inspect.red)
    end

  rescue Interrupt
    # do nothing
  end

  desc 'exec <project>', 'alias of :start'
  def exec(*args)
    self.invoke(:start, *args)
  end

  #
  # create
  #

  desc 'create <project>', 'create a new project'
  def create(name)
    Tailor::Project.create(name)
    Tailor::Project.edit(name)
  end

  desc 'new <project>', 'alias of :create'
  def new(*args)
    self.invoke(:create, *args)
  end

  #
  # edit
  #

  desc 'edit <project>', 'edit a project'
  def edit(name)
    Tailor::Project.edit(name)
  end

  #
  # delete
  #

  desc 'delete <project>', 'delete a project'
  def delete(name)
    Tailor::Project.delete(name)
  end

  desc 'rm <project>', 'alias of :delete'
  def rm(*args)
    self.invoke(:delete, *args)
  end

  #
  # list
  #

  desc 'list', 'list projects'
  def list
    puts Tailor::Project.list
  end

  desc 'ls', 'alias of :list'
  def ls
    self.invoke(:list)
  end

  #
  # completion
  #

  desc 'complete', 'list completions'
  option :bash, :type => :boolean, :default => false
  option :zsh , :type => :boolean, :default => false
  def complete(*args)
    opts = OpenStruct.new(options)

    if args.empty?
      self.class.commands.each do |name, cmd|
        next if name == 'complete'
        if opts.zsh
          puts "#{name}:#{cmd.description}"
        else
          puts "#{name}"
        end
      end
      return
    end

    if ['start', 'exec', 'edit', 'delete', 'rm'].include?(args.first)
      puts Project.list
    end
  end
end

CLI.start
